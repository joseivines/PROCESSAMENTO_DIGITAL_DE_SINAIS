# -*- coding: utf-8 -*-
"""DFT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1beZo5zMcUkT5_zW_X51fg93UXxYhdpr_
"""

#ALUNO: JOSÉ IVINES MATOS SILVA
#DICSCIPLINA: PROCESSAMENTO DIGITAL DE SINAIS
#OBJETIVO DO CÓDIGO:IMPLEMENTAÇÃO DA TRANSFORMADA DISCRETA DE FOURIER (DFT)

import numpy as np
import matplotlib.pyplot as plt

#implementando a tranformada de fourier de tempo discreto
def dft_simples(x):
    N = len(x) #seja "x" variável que conterá o sinal de entrada
    X = np.zeros(N, dtype=np.complex128) #criar um array de zeros para armazenar o resultado complexo

    for k in range(N):    # percorre cada componente de frequência "k"

        soma = 0.0 + 0.0j #zera a cada laço reiniciado

        #percorre todas as amostras "n" do sinal de entrada.
        for n in range(N):
            # Aplicão direta da equação da DFT
            termo = x[n] * np.exp(-2j * np.pi * k * n / N)
            soma += termo

        X[k] = soma

    return X

# aplicando a função da DFT
if __name__ == "__main__":
    N = 64 # número de amostras
    fs = 128 # taxa de amostragem
    t = np.linspace(0.0, N/fs, N, endpoint=False)

    # informe a frequencia definida para fhz1 e fh2  (Hz)
    fhz1 = 16 #Hz
    fhz2 = 8 #Hz
    sinal1 = 0.7 * np.sin(fhz1* 2.0 * np.pi * t)
    sinal2 = 1.0 * np.sin(fhz2* 2.0 * np.pi * t)
    sinal = sinal1 + sinal2

    # Calcular a DFT
    print("Calculando a DFT... (pode ser lento para N grande)")
    dft_result = dft_simples(sinal)
    print("Cálculo concluído.")

    freq = np.linspace(0.0, fs/2.0, N//2) #cria um vetor frequência que vai até a Fs
    magnitude = 2.0/N * np.abs(dft_result[0:N//2]) #cria um vetor magnitude que pega somente metade do

    #mostra os sinais de entrada e o resultado da DFT e
    try:
        plt.stem(freq, magnitude)
        plt.title("Espectro de Frequência (DFT direta)")
        plt.xlabel("Frequência [Hz]")
        plt.ylabel("Magnitude")
        plt.grid()
        plt.show()

        plt.figure(figsize=(12, 6))
        plt.subplot(2, 1, 1)
        plt.stem(t, sinal1)
        plt.title("Sinal 1")
        plt.xlabel("Tempo [s]")
        plt.ylabel("Amplitude")
        plt.grid()

        plt.subplot(2, 1, 2)
        plt.stem(t, sinal2)
        plt.title("Sinal 2")
        plt.xlabel("Tempo [s]")
        plt.ylabel("Amplitude")
        plt.grid()



    except ImportError:
        print("\nPara visualizar os gráficos, instale a biblioteca matplotlib: pip install matplotlib")

#FUTURAS IMPLEMENTAÇÕES
#SINAL COM RUIDO
#FFT COM SINAIS MULTIPLOS